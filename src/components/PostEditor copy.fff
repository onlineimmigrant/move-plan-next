'use client';

import React from 'react';
import { useEditor, EditorContent } from '@tiptap/react';
import StarterKit from '@tiptap/starter-kit';
import Link from '@tiptap/extension-link';
import ImageResize from 'tiptap-extension-resize-image';
import OrderedList from '@tiptap/extension-ordered-list';
import Blockquote from '@tiptap/extension-blockquote';
import CodeBlock from '@tiptap/extension-code-block';
import TextAlign from '@tiptap/extension-text-align';
import Placeholder from '@tiptap/extension-placeholder';
import Highlight from '@tiptap/extension-highlight';
import CharacterCount from '@tiptap/extension-character-count';
import Mention from '@tiptap/extension-mention';
import Table from '@tiptap/extension-table';
import TableRow from '@tiptap/extension-table-row';
import TableCell from '@tiptap/extension-table-cell';
import TableHeader from '@tiptap/extension-table-header';
import { mergeAttributes } from '@tiptap/core';
import { Button } from '@/components/ui/button';
import { Plugin, PluginKey } from 'prosemirror-state';
import { EditorView } from 'prosemirror-view';

// Define props interface explicitly
interface PostEditorProps {
  onSave: (content: string) => void;
  initialContent?: string;
}

// Custom Image extension (unchanged)
const CustomImage = ImageResize.extend({
  name: 'image',
  group: 'block',
  inline: false,
  selectable: true,

  addAttributes() {
    return {
      ...this.parent?.(),
      src: { default: null },
      alt: { default: null },
      title: { default: null },
      align: {
        default: 'left',
        parseHTML: (element) => element.getAttribute('data-align') || 'left',
        renderHTML: (attributes) => ({ 'data-align': attributes.align }),
      },
      width: {
        default: null,
        parseHTML: (element) => element.getAttribute('width') || element.style.width || null,
        renderHTML: (attributes) => ({ width: attributes.width || null }),
      },
      height: {
        default: null,
        parseHTML: (element) => element.getAttribute('height') || element.style.height || null,
        renderHTML: (attributes) => ({ height: attributes.height || null }),
      },
    };
  },

  renderHTML({ HTMLAttributes }) {
    const { align, width, height, ...rest } = HTMLAttributes;
    const imgStyles = [width ? `width: ${width}` : '', height ? `height: ${height}` : '']
      .filter(Boolean)
      .join('; ');
    return [
      'img',
      mergeAttributes(
        {
          class: `image-align-${align} max-w-full h-auto my-2 rounded`,
          style: imgStyles,
          'data-align': align,
        },
        rest
      ),
    ];
  },

  parseHTML() {
    return [
      {
        tag: 'img',
        getAttrs: (dom) => {
          if (!(dom instanceof HTMLImageElement)) return false;
          return {
            src: dom.getAttribute('src'),
            alt: dom.getAttribute('alt'),
            title: dom.getAttribute('title'),
            width: dom.getAttribute('width') || dom.style.width || null,
            height: dom.getAttribute('height') || dom.style.height || null,
            align: dom.getAttribute('data-align') || 'left',
          };
        },
      },
      {
        tag: 'div[class="image-wrapper"]',
        getAttrs: (dom) => {
          const img = dom.querySelector('img');
          if (!img) return false;
          return {
            src: img.getAttribute('src'),
            alt: img.getAttribute('alt'),
            title: img.getAttribute('title'),
            width: img.getAttribute('width') || img.style.width || null,
            height: img.getAttribute('height') || dom.style.height || null,
            align: img.getAttribute('data-align') || dom.style.textAlign || 'left',
          };
        },
      },
    ];
  },
});

// Custom Table extension with border attributes and scrollable wrapper
const CustomTable = Table.extend({
  name: 'table',

  addAttributes() {
    return {
      borderStyle: {
        default: 'solid',
        parseHTML: (element) => element.getAttribute('data-border-style') || 'solid',
        renderHTML: (attributes) => ({ 'data-border-style': attributes.borderStyle }),
      },
      borderColor: {
        default: '#e5e7eb', // Tailwind gray-100
        parseHTML: (element) => element.getAttribute('data-border-color') || '#e5e7eb',
        renderHTML: (attributes) => ({ 'data-border-color': attributes.borderColor }),
      },
      borderWidth: {
        default: '1px',
        parseHTML: (element) => element.getAttribute('data-border-width') || '1px',
        renderHTML: (attributes) => ({ 'data-border-width': attributes.borderWidth }),
      },
    };
  },

  renderHTML({ HTMLAttributes }) {
    return [
      'div',
      { class: 'table-wrapper', style: 'overflow-x: auto; max-width: 100%;' },
      [
        'table',
        mergeAttributes(
          {
            class: 'tiptap-table',
            style: `border-collapse: collapse; width: 100%;`,
          },
          HTMLAttributes
        ),
        0,
      ],
    ];
  },

  addProseMirrorPlugins() {
    const plugins = this.parent?.() || [];
    return [...plugins, createResizePlugin()];
  },
});

// Custom TableCell with CSS-based border styling
const CustomTableCell = TableCell.extend({
  renderHTML({ HTMLAttributes }) {
    return [
      'td',
      mergeAttributes(HTMLAttributes, {
        class: 'tiptap-table-cell',
        style: `padding: 0.5rem;`,
      }),
      0,
    ];
  },
});

// Custom TableHeader with CSS-based border styling
const CustomTableHeader = TableHeader.extend({
  renderHTML({ HTMLAttributes }) {
    return [
      'th',
      mergeAttributes(HTMLAttributes, {
        class: 'tiptap-table-header',
        style: `padding: 0.5rem; background-color: #f4f4f4; font-weight: bold;`,
      }),
      0,
    ];
  },
});

// Resize plugin for draggable borders
function createResizePlugin() {
  return new Plugin({
    key: new PluginKey('tableResize'),
    view(editorView: EditorView) {
      return {
        update: () => {
          const tables = editorView.dom.querySelectorAll('.tiptap-table');
          tables.forEach((table) => {
            addResizeHandles(table as HTMLElement, editorView);
          });
        },
        destroy: () => {
          document.querySelectorAll('.resize-handle').forEach((handle) => handle.remove());
        },
      };
    },
  });
}

function addResizeHandles(table: HTMLElement, editorView: EditorView) {
  table.querySelectorAll('.resize-handle').forEach((handle) => handle.remove());

  const rows = table.querySelectorAll('tr');
  const headerRow = table.querySelector('tr');
  if (headerRow) {
    const cells = headerRow.querySelectorAll('th, td');
    cells.forEach((cell, index) => {
      const handle = document.createElement('div');
      handle.className = 'resize-handle column-resize';
      handle.style.cssText = `
        position: absolute;
        top: 0;
        right: -4px;
        width: 8px;
        height: 100%;
        cursor: col-resize;
        background: transparent;
        z-index: 10;
      `;
      cell.style.position = 'relative';
      cell.appendChild(handle);

      handle.addEventListener('mousedown', (e: MouseEvent) => {
        e.preventDefault();
        startColumnResize(e, table, index, editorView);
      });
    });
  }

  rows.forEach((row, index) => {
    const handle = document.createElement('div');
    handle.className = 'resize-handle row-resize';
    handle.style.cssText = `
      position: absolute;
      bottom: -4px;
      left: 0;
      width: 100%;
      height: 8px;
      cursor: row-resize;
      background: transparent;
      z-index: 10;
    `;
    row.style.position = 'relative';
    row.appendChild(handle);

    handle.addEventListener('mousedown', (e: MouseEvent) => {
      e.preventDefault();
      startRowResize(e, table, index, editorView);
    });
  });
}

function startColumnResize(e: MouseEvent, table: HTMLElement, colIndex: number, editorView: EditorView) {
  const startX = e.clientX;
  const cells = Array.from(table.querySelectorAll(`tr > *:nth-child(${colIndex + 1})`));
  const startWidth = cells[0].getBoundingClientRect().width;

  const onMouseMove = (moveEvent: MouseEvent) => {
    const delta = moveEvent.clientX - startX;
    const newWidth = Math.max(50, startWidth + delta);
    cells.forEach((cell) => {
      (cell as HTMLElement).style.width = `${newWidth}px`;
    });
  };

  const onMouseUp = () => {
    document.removeEventListener('mousemove', onMouseMove);
    document.removeEventListener('mouseup', onMouseUp);
    editorView.focus();
  };

  document.addEventListener('mousemove', onMouseMove);
  document.addEventListener('mouseup', onMouseUp);
}

function startRowResize(e: MouseEvent, table: HTMLElement, rowIndex: number, editorView: EditorView) {
  const startY = e.clientY;
  const row = table.querySelectorAll('tr')[rowIndex];
  const startHeight = row.getBoundingClientRect().height;

  const onMouseMove = (moveEvent: MouseEvent) => {
    const delta = moveEvent.clientY - startY;
    const newHeight = Math.max(20, startHeight + delta);
    (row as HTMLElement).style.height = `${newHeight}px`;
  };

  const onMouseUp = () => {
    document.removeEventListener('mousemove', onMouseMove);
    document.removeEventListener('mouseup', onMouseUp);
    editorView.focus();
  };

  document.addEventListener('mousemove', onMouseMove);
  document.addEventListener('mouseup', onMouseUp);
}

const PostEditor: React.FC<PostEditorProps> = ({ onSave, initialContent }) => {
  const editor = useEditor({
    extensions: [
      StarterKit.configure({
        blockquote: false,
        codeBlock: false,
      }),
      Link.configure({
        openOnClick: false,
        autolink: true,
        HTMLAttributes: {
          class: 'text-sky-700 underline',
          rel: 'noopener noreferrer',
          target: '_blank',
        },
      }),
      CustomImage,
      OrderedList,
      Blockquote,
      CodeBlock,
      TextAlign.configure({
        types: ['heading', 'paragraph', 'image'],
      }),
      Placeholder.configure({
        placeholder: 'Start writing your post here...',
      }),
      Highlight.configure({
        multicolor: false,
        HTMLAttributes: { class: 'bg-yellow-200' },
      }),
      CharacterCount.configure({
        limit: 50000,
      }),
      Mention.configure({
        HTMLAttributes: { class: 'mention' },
        suggestion: {
          items: ({ query }) => {
            const suggestions = ['alice', 'bob', 'charlie', 'david', 'emma'];
            return suggestions
              .filter((item) => item.toLowerCase().startsWith(query.toLowerCase()))
              .slice(0, 5);
          },
          render: () => {
            let component: HTMLDivElement | null = null;
            let popup: HTMLDivElement | null = null;

            return {
              onStart: (props) => {
                component = document.createElement('div');
                component.className = 'mention-suggestions';
                component.style.position = 'absolute';
                component.style.background = 'white';
                component.style.border = '1px solid #ccc';
                component.style.padding = '5px';
                component.innerHTML = props.items
                  .map(
                    (item) =>
                      `<div class="suggestion-item" style="padding: 5px; cursor: pointer;">@${item}</div>`
                  )
                  .join('');

                popup = document.body.appendChild(component);
                const rect = props.clientRect?.();
                if (rect) {
                  popup.style.left = `${rect.left}px`;
                  popup.style.top = `${rect.bottom}px`;
                }

                component.addEventListener('click', (e) => {
                  const target = e.target as HTMLElement;
                  const item = target.textContent?.slice(1);
                  if (item) {
                    props.command({ id: item });
                  }
                });
              },
              onUpdate: (props) => {
                if (component) {
                  component.innerHTML = props.items
                    .map(
                      (item) =>
                        `<div class="suggestion-item" style="padding: 5px; cursor: pointer;">@${item}</div>`
                    )
                    .join('');
                }
              },
              onExit: () => {
                if (popup) {
                  popup.remove();
                  popup = null;
                  component = null;
                }
              },
            };
          },
        },
      }),
      CustomTable.configure({
        resizable: true,
      }),
      TableRow,
      CustomTableHeader,
      CustomTableCell,
    ],
    content: initialContent || '<p>Start writing your post here...</p>',
    editorProps: {
      attributes: {
        class: 'prose prose-sm sm:prose lg:prose-lg xl:prose-xl m-5 focus:outline-none',
      },
      handleDrop: (view, event, slice, moved) => {
        if (!moved && event.dataTransfer && event.dataTransfer.files && event.dataTransfer.files.length) {
          const file = event.dataTransfer.files[0];
          if (file.type.startsWith('image/')) {
            const reader = new FileReader();
            reader.onload = (e) => {
              const src = e.target?.result as string;
              const coordinates = view.posAtCoords({ left: event.clientX, top: event.clientY });
              if (coordinates) {
                view.dispatch(
                  view.state.tr.insert(
                    coordinates.pos,
                    view.state.schema.nodes.image.create({
                      src,
                      align: 'left',
                      width: '200px',
                      height: 'auto',
                    })
                  )
                );
              }
            };
            reader.readAsDataURL(file);
            return true;
          }
        }
        return false;
      },
    },
  });

  if (!editor) return null;

  const applyStyle = (tag: string) => {
    switch (tag) {
      case 'h1':
        editor.chain().focus().toggleHeading({ level: 1 }).run();
        break;
      case 'h2':
        editor.chain().focus().toggleHeading({ level: 2 }).run();
        break;
      case 'h3':
        editor.chain().focus().toggleHeading({ level: 3 }).run();
        break;
      case 'h4':
        editor.chain().focus().toggleHeading({ level: 4 }).run();
        break;
      case 'h5':
        editor.chain().focus().toggleHeading({ level: 5 }).run();
        break;
      case 'p':
        editor.chain().focus().setParagraph().run();
        break;
      case 'ul':
        editor.chain().focus().toggleBulletList().run();
        break;
      case 'ol':
        editor.chain().focus().toggleOrderedList().run();
        break;
      case 'blockquote':
        editor.chain().focus().setParagraph().toggleBlockquote().run();
        break;
      case 'codeBlock':
        editor.chain().focus().setParagraph().toggleCodeBlock().run();
        break;
      case 'bold':
        editor.chain().focus().toggleBold().run();
        break;
      case 'italic':
        editor.chain().focus().toggleItalic().run();
        break;
      case 'table':
        editor.chain().focus().insertTable({ rows: 3, cols: 3, withHeaderRow: true }).run();
        break;
      case 'addRowAfter':
        editor.chain().focus().addRowAfter().run();
        break;
      case 'addColumnAfter':
        editor.chain().focus().addColumnAfter().run();
        break;
      case 'deleteRow':
        editor.chain().focus().deleteRow().run();
        break;
      case 'deleteColumn':
        editor.chain().focus().deleteColumn().run();
        break;
      case 'mergeCells':
        editor.chain().focus().mergeCells().run();
        break;
      case 'splitCell':
        editor.chain().focus().splitCell().run();
        break;
      case 'deleteTable':
        editor.chain().focus().deleteTable().run();
        break;
      case 'borderNone':
        editor.chain().focus().updateAttributes('table', { borderStyle: 'none' }).run();
        break;
      case 'borderSolid':
        editor.chain().focus().updateAttributes('table', { borderStyle: 'solid', borderWidth: '1px' }).run();
        break;
      case 'borderDashed':
        editor.chain().focus().updateAttributes('table', { borderStyle: 'dashed', borderWidth: '1px' }).run();
        break;
      case 'borderBold':
        editor.chain().focus().updateAttributes('table', { borderStyle: 'solid', borderWidth: '3px' }).run();
        break;
      case 'borderColor':
        const color = window.prompt('Enter border color (hex or Tailwind class)', '#e5e7eb');
        if (color) {
          editor.chain().focus().updateAttributes('table', { borderColor: color }).run();
        }
        break;
      default:
        break;
    }
  };

  const setLink = () => {
    const url = window.prompt('Enter the URL');
    if (url) {
      editor.chain().focus().toggleLink({ href: url, target: '_blank' }).run();
    }
  };

  const addImage = () => {
    const url = window.prompt('Enter the image URL');
    if (url) {
      editor.chain().focus().setNode('image', { src: url, align: 'left', width: '200px', height: 'auto' }).run();
    }
  };

  const setImageAlignment = (align: 'left' | 'center' | 'right') => {
    const { state } = editor;
    const { selection } = state;
    const pos = selection.$anchor.pos;
    const node = state.doc.nodeAt(pos);

    if (node && node.type.name === 'image') {
      const transaction = state.tr.setNodeMarkup(pos, undefined, {
        ...node.attrs,
        align,
      });
      editor.view.dispatch(transaction);
    } else {
      console.log('No image selected');
    }
  };

  const toggleHighlight = () => {
    editor.chain().focus().toggleHighlight().run();
  };

  const handleSave = () => {
    const htmlContent = editor.getHTML();
    console.log('Saved HTML:', htmlContent);
    onSave(htmlContent);
  };

  return (
    <div className="post-editor text-gray-600">
      <style jsx>{`
        .table-wrapper {
          overflow-x: auto;
          max-width: 100%;
          margin: 1rem 0;
        }
        .tiptap-table {
          border-collapse: collapse;
          width: 100%;
        }
        .tiptap-table[data-border-style='none'] .tiptap-table-cell,
        .tiptap-table[data-border-style='none'] .tiptap-table-header {
          border: none;
        }
        .tiptap-table[data-border-style='solid'] .tiptap-table-cell,
        .tiptap-table[data-border-style='solid'] .tiptap-table-header {
          border: solid var(--border-width, 1px) var(--border-color, #e5e7eb);
        }
        .tiptap-table[data-border-style='dashed'] .tiptap-table-cell,
        .tiptap-table[data-border-style='dashed'] .tiptap-table-header {
          border: dashed var(--border-width, 1px) var(--border-color, #e5e7eb);
        }
        .tiptap-table[data-border-width='3px'] .tiptap-table-cell,
        .tiptap-table[data-border-width='3px'] .tiptap-table-header {
          --border-width: 3px;
        }
        .tiptap-table .tiptap-table-cell,
        .tiptap-table .tiptap-table-header {
          --border-color: var(--border-color, #e5e7eb);
          position: relative;
          padding: 0.5rem;
          text-align: left;
          min-width: 50px;
        }
        .tiptap-table-header {
          background-color: #f4f4f4;
          font-weight: bold;
        }
        .resize-handle:hover {
          background: rgba(0, 0, 0, 0.2);
        }
        .image-align-left {
          display: block;
          margin-left: 0;
          margin-right: auto;
        }
        .image-align-center {
          display: block;
          margin-left: auto;
          margin-right: auto;
        }
        .image-align-right {
          display: block;
          margin-left: auto;
          margin-right: 0;
        }
      `}</style>
      <div className="toolbar mb-4 flex gap-0.5 flex-wrap">
        <Button
          size="sm"
          onClick={() => applyStyle('h1')}
          variant={editor.isActive('heading', { level: 1 }) ? 'secondary' : 'outline'}
        >
          H1
        </Button>
        <Button
          size="sm"
          onClick={() => applyStyle('h2')}
          variant={editor.isActive('heading', { level: 2 }) ? 'secondary' : 'outline'}
        >
          H2
        </Button>
        <Button
          size="sm"
          onClick={() => applyStyle('h3')}
          variant={editor.isActive('heading', { level: 3 }) ? 'secondary' : 'outline'}
        >
          H3
        </Button>
        <Button
          size="sm"
          onClick={() => applyStyle('h4')}
          variant={editor.isActive('heading', { level: 4 }) ? 'secondary' : 'outline'}
        >
          H4
        </Button>
        <Button
          size="sm"
          onClick={() => applyStyle('h5')}
          variant={editor.isActive('heading', { level: 5 }) ? 'secondary' : 'outline'}
        >
          H5
        </Button>
        <Button
          size="sm"
          onClick={() => applyStyle('p')}
          variant={editor.isActive('paragraph') ? 'secondary' : 'outline'}
        >
          P
        </Button>
        <Button
          size="sm"
          onClick={() => applyStyle('ul')}
          variant={editor.isActive('bulletList') ? 'secondary' : 'outline'}
        >
          UL
        </Button>
        <Button
          size="sm"
          onClick={() => applyStyle('ol')}
          variant={editor.isActive('orderedList') ? 'secondary' : 'outline'}
        >
          OL
        </Button>
        <Button
          size="sm"
          onClick={() => applyStyle('blockquote')}
          variant={editor.isActive('blockquote') ? 'secondary' : 'outline'}
        >
          Quote
        </Button>
        <Button
          size="sm"
          onClick={() => applyStyle('codeBlock')}
          variant={editor.isActive('codeBlock') ? 'secondary' : 'outline'}
        >
          Code
        </Button>
        <Button
          size="sm"
          onClick={() => applyStyle('bold')}
          variant={editor.isActive('bold') ? 'secondary' : 'outline'}
        >
          B
        </Button>
        <Button
          size="sm"
          onClick={() => applyStyle('italic')}
          variant={editor.isActive('italic') ? 'secondary' : 'outline'}
        >
          I
        </Button>
        <Button
          size="sm"
          onClick={setLink}
          variant={editor.isActive('link') ? 'secondary' : 'outline'}
        >
          Link
        </Button>
        <Button size="sm" onClick={addImage} variant="outline">
          Image
        </Button>
        <Button
          size="sm"
          onClick={() => setImageAlignment('left')}
          variant={editor.isActive('image', { align: 'left' }) ? 'secondary' : 'outline'}
        >
          Left
        </Button>
        <Button
          size="sm"
          onClick={() => setImageAlignment('center')}
          variant={editor.isActive('image', { align: 'center' }) ? 'secondary' : 'outline'}
        >
          Center
        </Button>
        <Button
          size="sm"
          onClick={() => setImageAlignment('right')}
          variant={editor.isActive('image', { align: 'right' }) ? 'secondary' : 'outline'}
        >
          Right
        </Button>
        <Button
          size="sm"
          onClick={() => applyStyle('table')}
          variant={editor.isActive('table') ? 'secondary' : 'outline'}
        >
          Table
        </Button>
        <Button
          size="sm"
          onClick={() => applyStyle('addRowAfter')}
          variant={editor.isActive('table') ? 'outline' : 'outline'}
          disabled={!editor.isActive('table')}
        >
          Add Row
        </Button>
        <Button
          size="sm"
          onClick={() => applyStyle('addColumnAfter')}
          variant={editor.isActive('table') ? 'outline' : 'outline'}
          disabled={!editor.isActive('table')}
        >
          Add Column
        </Button>
        <Button
          size="sm"
          onClick={() => applyStyle('deleteRow')}
          variant={editor.isActive('table') ? 'outline' : 'outline'}
          disabled={!editor.isActive('table')}
        >
          Delete Row
        </Button>
        <Button
          size="sm"
          onClick={() => applyStyle('deleteColumn')}
          variant={editor.isActive('table') ? 'outline' : 'outline'}
          disabled={!editor.isActive('table')}
        >
          Delete Column
        </Button>
        <Button
          size="sm"
          onClick={() => applyStyle('mergeCells')}
          variant={editor.isActive('table') ? 'outline' : 'outline'}
          disabled={!editor.isActive('table')}
        >
          Merge Cells
        </Button>
        <Button
          size="sm"
          onClick={() => applyStyle('splitCell')}
          variant={editor.isActive('table') ? 'outline' : 'outline'}
          disabled={!editor.isActive('table')}
        >
          Split Cell
        </Button>
        <Button
          size="sm"
          onClick={() => applyStyle('deleteTable')}
          variant={editor.isActive('table') ? 'outline' : 'outline'}
          disabled={!editor.isActive('table')}
        >
          Delete Table
        </Button>
        <Button
          size="sm"
          onClick={() => applyStyle('borderNone')}
          variant={editor.isActive('table', { borderStyle: 'none' }) ? 'secondary' : 'outline'}
          disabled={!editor.isActive('table')}
        >
          No Border
        </Button>
        <Button
          size="sm"
          onClick={() => applyStyle('borderSolid')}
          variant={
            editor.isActive('table', { borderStyle: 'solid', borderWidth: '1px' })
              ? 'secondary'
              : 'outline'
          }
          disabled={!editor.isActive('table')}
        >
          Solid Border
        </Button>
        <Button
          size="sm"
          onClick={() => applyStyle('borderDashed')}
          variant={editor.isActive('table', { borderStyle: 'dashed' }) ? 'secondary' : 'outline'}
          disabled={!editor.isActive('table')}
        >
          Dashed Border
        </Button>
        <Button
          size="sm"
          onClick={() => applyStyle('borderBold')}
          variant={
            editor.isActive('table', { borderStyle: 'solid', borderWidth: '3px' })
              ? 'secondary'
              : 'outline'
          }
          disabled={!editor.isActive('table')}
        >
          Bold Border
        </Button>
        <Button
          size="sm"
          onClick={() => applyStyle('borderColor')}
          variant="outline"
          disabled={!editor.isActive('table')}
        >
          Border Color
        </Button>
        <Button
          size="sm"
          onClick={toggleHighlight}
          variant={editor.isActive('highlight') ? 'secondary' : 'outline'}
        >
          Highlight
        </Button>
        <Button size="sm" onClick={handleSave} variant="primary">
          Save
        </Button>
      </div>
      <EditorContent
        editor={editor}
        className="border border-gray-200 p-4 rounded-md min-h-[300px] bg-white"
      />
      <div className="mt-2 text-sm text-gray-500">
        {editor?.storage.characterCount.characters()} / 50000 characters
      </div>
    </div>
  );
};

export default PostEditor;
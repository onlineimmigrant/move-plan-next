'use client';

import React, { useState, useEffect, useRef } from 'react';
import { 
  PhotoIcon,
  Square2StackIcon,
  SparklesIcon,
  Bars3BottomLeftIcon,
  Bars3Icon,
  Bars3BottomRightIcon,
  ViewColumnsIcon,
  ArrowsRightLeftIcon,
  PlusIcon,
  XMarkIcon,
} from '@heroicons/react/24/outline';
import { useHeroSectionEdit } from './context';
import ColorPaletteDropdown, { getColorValue } from '@/components/Shared/ColorPaletteDropdown';
import ImageGalleryModal from '@/components/modals/ImageGalleryModal';
import Button from '@/ui/Button';
import { cn } from '@/lib/utils';
import { BaseModal } from '../_shared/BaseModal';

// Tooltip Component
const Tooltip = ({ content }: { content: string }) => {
  return (
    <div className="absolute bottom-full mb-2 left-1/2 -translate-x-1/2 z-50 pointer-events-none opacity-0 group-hover:opacity-100 transition-opacity">
      <div className="relative">
        {/* Content */}
        <div className="bg-white text-gray-700 text-xs rounded-lg shadow-lg border border-gray-200 px-3 py-2 whitespace-normal w-64">
          {content}
        </div>
        {/* Arrow pointing down */}
        <div className="absolute -bottom-1 left-1/2 -translate-x-1/2">
          <div className="w-2 h-2 bg-white border-r border-b border-gray-200 transform rotate-45" />
        </div>
      </div>
    </div>
  );
};

interface HeroFormData {
  h1_title: string;
  h1_title_translation: Record<string, string>;
  p_description: string;
  p_description_translation: Record<string, string>;
  image: string | null;
  h1_text_color: string;
  h1_text_color_gradient_from: string;
  h1_text_color_gradient_to: string;
  h1_text_color_gradient_via: string;
  is_h1_gradient_text: boolean;
  h1_text_size: string;
  h1_text_size_mobile: string;
  p_description_color: string;
  p_description_size: string;
  p_description_size_mobile: string;
  p_description_weight: string;
  title_alighnement: string;
  title_block_width: string;
  title_block_columns: number;
  background_color: string;
  background_color_gradient_from: string;
  background_color_gradient_to: string;
  background_color_gradient_via: string;
  is_bg_gradient: boolean;
  is_image_full_page: boolean;
  image_first: boolean;
  is_seo_title: boolean;
  button_main_get_started: string;
  button_explore: string;
}

export default function HeroSectionEditModal() {
  const { isOpen, editingSection, mode, closeModal, updateSection, deleteSection } = useHeroSectionEdit();
  const [isFullscreen, setIsFullscreen] = useState(false);
  const [isSaving, setIsSaving] = useState(false);
  const [showDeleteConfirm, setShowDeleteConfirm] = useState(false);
  const [showImageGallery, setShowImageGallery] = useState(false);
  const [showTitleColorPicker, setShowTitleColorPicker] = useState(false);
  const [showDescColorPicker, setShowDescColorPicker] = useState(false);
  const [showBgColorPicker, setShowBgColorPicker] = useState(false);
  
  const titleColorButtonRef = useRef<HTMLButtonElement>(null);
  const descColorButtonRef = useRef<HTMLButtonElement>(null);
  const bgColorButtonRef = useRef<HTMLButtonElement>(null);
  
  const [formData, setFormData] = useState<HeroFormData>({
    h1_title: '',
    h1_title_translation: {},
    p_description: '',
    p_description_translation: {},
    image: null,
    h1_text_color: 'gray-800',
    h1_text_color_gradient_from: 'gray-800',
    h1_text_color_gradient_to: 'blue-500',
    h1_text_color_gradient_via: '',
    is_h1_gradient_text: false,
    h1_text_size: 'text-4xl',
    h1_text_size_mobile: 'text-2xl',
    p_description_color: 'gray-600',
    p_description_size: 'text-lg',
    p_description_size_mobile: 'text-base',
    p_description_weight: 'font-normal',
    title_alighnement: 'center',
    title_block_width: 'full',
    title_block_columns: 1,
    background_color: 'white',
    background_color_gradient_from: 'blue-50',
    background_color_gradient_to: 'purple-50',
    background_color_gradient_via: '',
    is_bg_gradient: false,
    is_image_full_page: false,
    image_first: false,
    is_seo_title: false,
    button_main_get_started: 'Get Started',
    button_explore: 'Explore',
  });

  // Load section data when modal opens
  useEffect(() => {
    if (isOpen && editingSection) {
      setFormData({
        h1_title: editingSection.h1_title || '',
        h1_title_translation: editingSection.h1_title_translation || {},
        p_description: editingSection.p_description || '',
        p_description_translation: editingSection.p_description_translation || {},
        image: editingSection.image || null,
        h1_text_color: editingSection.h1_text_color || 'gray-800',
        h1_text_color_gradient_from: editingSection.h1_text_color_gradient_from || 'gray-800',
        h1_text_color_gradient_to: editingSection.h1_text_color_gradient_to || 'blue-500',
        h1_text_color_gradient_via: editingSection.h1_text_color_gradient_via || '',
        is_h1_gradient_text: editingSection.is_h1_gradient_text || false,
        h1_text_size: editingSection.h1_text_size || 'text-4xl',
        h1_text_size_mobile: editingSection.h1_text_size_mobile || 'text-2xl',
        p_description_color: editingSection.p_description_color || 'gray-600',
        p_description_size: editingSection.p_description_size || 'text-lg',
        p_description_size_mobile: editingSection.p_description_size_mobile || 'text-base',
        p_description_weight: editingSection.p_description_weight || 'font-normal',
        title_alighnement: editingSection.title_alighnement || 'center',
        title_block_width: editingSection.title_block_width || 'full',
        title_block_columns: editingSection.title_block_columns || 1,
        background_color: editingSection.background_color || 'white',
        background_color_gradient_from: editingSection.background_color_gradient_from || 'blue-50',
        background_color_gradient_to: editingSection.background_color_gradient_to || 'purple-50',
        background_color_gradient_via: editingSection.background_color_gradient_via || '',
        is_bg_gradient: editingSection.is_bg_gradient || false,
        is_image_full_page: editingSection.is_image_full_page || false,
        image_first: editingSection.image_first || false,
        is_seo_title: editingSection.is_seo_title || false,
        button_main_get_started: editingSection.button_main_get_started || 'Get Started',
        button_explore: editingSection.button_explore || 'Explore',
      });
    }
  }, [isOpen, editingSection]);

  const handleSave = async () => {
    setIsSaving(true);
    try {
      await updateSection(formData);
    } catch (error) {
      console.error('Error saving:', error);
    } finally {
      setIsSaving(false);
    }
  };

  const handleDelete = async () => {
    setIsSaving(true);
    try {
      await deleteSection();
      setShowDeleteConfirm(false);
    } catch (error) {
      console.error('Error deleting:', error);
    } finally {
      setIsSaving(false);
    }
  };

  const handleFieldChange = (field: keyof HeroFormData, value: any) => {
    setFormData(prev => ({ ...prev, [field]: value }));
  };

  // Get title color classes (simplified - using direct color for now)
  const getTitleColorClasses = () => {
    return getColorValue(formData.h1_text_color);
  };

  // Get background color classes (simplified - using direct color for now)
  const getBgColorClasses = () => {
    return getColorValue(formData.background_color);
  };

  if (!isOpen) return null;

  return (
    <>
      <BaseModal
        isOpen={isOpen}
        onClose={closeModal}
        title={mode === 'create' ? 'Create Hero Section' : 'Edit Hero Section'}
        size="xl"
        noPadding={true}
      >
        {/* Fixed Toolbar */}
        <div className="sticky top-0 z-10 bg-sky-50 border-b border-sky-200 px-6 py-3">
          <div className="flex items-center justify-between gap-2">
            {/* Left: Style Controls */}
            <div className="flex items-center gap-1">
              {/* Image Gallery */}
              <div className="relative group">
                <button
                  onClick={() => setShowImageGallery(true)}
                  className="p-2 rounded-lg hover:bg-sky-100 transition-colors"
                  title="Add Image"
                >
                  <PhotoIcon className="w-5 h-5 text-sky-600" />
                </button>
                <Tooltip content="Add hero image from gallery" />
              </div>

              {/* Title Alignment */}
              <div className="flex items-center border-l border-sky-200 pl-2 ml-1">
                <div className="relative group">
                  <button
                    onClick={() => handleFieldChange('title_alighnement', 'left')}
                    className={cn(
                      "p-2 rounded-lg transition-colors",
                      formData.title_alighnement === 'left' ? "bg-sky-200" : "hover:bg-sky-100"
                    )}
                  >
                    <Bars3BottomLeftIcon className="w-5 h-5 text-sky-600" />
                  </button>
                  <Tooltip content="Align left" />
                </div>
                <div className="relative group">
                  <button
                    onClick={() => handleFieldChange('title_alighnement', 'center')}
                    className={cn(
                      "p-2 rounded-lg transition-colors",
                      formData.title_alighnement === 'center' ? "bg-sky-200" : "hover:bg-sky-100"
                    )}
                  >
                    <Bars3Icon className="w-5 h-5 text-sky-600" />
                  </button>
                  <Tooltip content="Align center" />
                </div>
                <div className="relative group">
                  <button
                    onClick={() => handleFieldChange('title_alighnement', 'right')}
                    className={cn(
                      "p-2 rounded-lg transition-colors",
                      formData.title_alighnement === 'right' ? "bg-sky-200" : "hover:bg-sky-100"
                    )}
                  >
                    <Bars3BottomRightIcon className="w-5 h-5 text-sky-600" />
                  </button>
                  <Tooltip content="Align right" />
                </div>
              </div>

              {/* Column Layout */}
              <div className="flex items-center border-l border-sky-200 pl-2 ml-1">
                <div className="relative group">
                  <button
                    onClick={() => handleFieldChange('title_block_columns', 1)}
                    className={cn(
                      "p-2 rounded-lg transition-colors",
                      formData.title_block_columns === 1 ? "bg-sky-200" : "hover:bg-sky-100"
                    )}
                  >
                    <Square2StackIcon className="w-5 h-5 text-sky-600" />
                  </button>
                  <Tooltip content="Single column" />
                </div>
                <div className="relative group">
                  <button
                    onClick={() => handleFieldChange('title_block_columns', 2)}
                    className={cn(
                      "p-2 rounded-lg transition-colors",
                      formData.title_block_columns === 2 ? "bg-sky-200" : "hover:bg-sky-100"
                    )}
                  >
                    <ViewColumnsIcon className="w-5 h-5 text-sky-600" />
                  </button>
                  <Tooltip content="Two columns" />
                </div>
              </div>

              {/* Image Position */}
              {formData.image && (
                <div className="flex items-center border-l border-sky-200 pl-2 ml-1">
                  <div className="relative group">
                    <button
                      onClick={() => handleFieldChange('image_first', !formData.image_first)}
                      className={cn(
                        "p-2 rounded-lg transition-colors",
                        formData.image_first ? "bg-sky-200" : "hover:bg-sky-100"
                      )}
                    >
                      <ArrowsRightLeftIcon className="w-5 h-5 text-sky-600" />
                    </button>
                    <Tooltip content="Swap image position (left/right)" />
                  </div>
                </div>
              )}

              {/* Color Pickers */}
              <div className="flex items-center border-l border-sky-200 pl-2 ml-1 gap-1">
                {/* Title Color */}
                <div className="relative group">
                  <button
                    ref={titleColorButtonRef}
                    onClick={() => setShowTitleColorPicker(!showTitleColorPicker)}
                    className="p-2 rounded-lg hover:bg-sky-100 transition-colors flex items-center gap-1"
                  >
                    <div className={cn("w-4 h-4 rounded border border-gray-300", getTitleColorClasses())} />
                    <SparklesIcon className="w-4 h-4 text-sky-600" />
                  </button>
                  <Tooltip content="Title color" />
                </div>

                {/* Description Color */}
                <div className="relative group">
                  <button
                    ref={descColorButtonRef}
                    onClick={() => setShowDescColorPicker(!showDescColorPicker)}
                    className="p-2 rounded-lg hover:bg-sky-100 transition-colors flex items-center gap-1"
                  >
                    <div className={cn("w-4 h-4 rounded border border-gray-300", getColorValue(formData.p_description_color))} />
                    <SparklesIcon className="w-4 h-4 text-sky-600" />
                  </button>
                  <Tooltip content="Description color" />
                </div>

                {/* Background Color */}
                <div className="relative group">
                  <button
                    ref={bgColorButtonRef}
                    onClick={() => setShowBgColorPicker(!showBgColorPicker)}
                    className="p-2 rounded-lg hover:bg-sky-100 transition-colors flex items-center gap-1"
                  >
                    <div className={cn("w-4 h-4 rounded border border-gray-300", getBgColorClasses())} />
                    <SparklesIcon className="w-4 h-4 text-sky-600" />
                  </button>
                  <Tooltip content="Background color" />
                </div>
              </div>
            </div>

            {/* Right: Mode Indicator */}
            <div className="text-xs text-sky-600 font-medium uppercase">
              {mode === 'create' ? 'Create Mode' : 'Edit Mode'}
            </div>
          </div>

          {/* Color Picker Dropdowns */}
          {showTitleColorPicker && titleColorButtonRef.current && (
            <div className="absolute mt-2 z-50">
              <ColorPaletteDropdown
                value={formData.h1_text_color}
                onChange={(colorClass: string) => {
                  handleFieldChange('h1_text_color', colorClass);
                  setShowTitleColorPicker(false);
                }}
                isOpen={showTitleColorPicker}
                onToggle={() => setShowTitleColorPicker(!showTitleColorPicker)}
                onClose={() => setShowTitleColorPicker(false)}
                buttonRef={titleColorButtonRef}
                useFixedPosition={true}
              />
            </div>
          )}

          {showDescColorPicker && descColorButtonRef.current && (
            <div className="absolute mt-2 z-50">
              <ColorPaletteDropdown
                value={formData.p_description_color}
                onChange={(colorClass: string) => {
                  handleFieldChange('p_description_color', colorClass);
                  setShowDescColorPicker(false);
                }}
                isOpen={showDescColorPicker}
                onToggle={() => setShowDescColorPicker(!showDescColorPicker)}
                onClose={() => setShowDescColorPicker(false)}
                buttonRef={descColorButtonRef}
                useFixedPosition={true}
              />
            </div>
          )}

          {showBgColorPicker && bgColorButtonRef.current && (
            <div className="absolute mt-2 z-50">
              <ColorPaletteDropdown
                value={formData.background_color}
                onChange={(colorClass: string) => {
                  handleFieldChange('background_color', colorClass);
                  setShowBgColorPicker(false);
                }}
                isOpen={showBgColorPicker}
                onToggle={() => setShowBgColorPicker(!showBgColorPicker)}
                onClose={() => setShowBgColorPicker(false)}
                buttonRef={bgColorButtonRef}
                useFixedPosition={true}
              />
            </div>
          )}
        </div>

        {/* Scrollable Content */}
        <div className="flex-1 overflow-y-auto">
          {/* Live Preview */}
          <div className={cn("min-h-[400px] p-8", getBgColorClasses())}>
            <div className={cn(
              "container mx-auto",
              formData.title_block_columns === 2 ? "grid grid-cols-1 md:grid-cols-2 gap-8 items-center" : ""
            )}>
              {/* Image */}
              {formData.image && (
                <div className={cn(
                  "relative",
                  formData.title_block_columns === 2 && formData.image_first ? "order-first" : "order-last"
                )}>
                  <img
                    src={formData.image}
                    alt="Hero"
                    className={cn(
                      "rounded-lg shadow-lg",
                      formData.is_image_full_page ? "w-full h-full object-cover" : "max-w-full h-auto"
                    )}
                  />
                </div>
              )}

              {/* Text Content */}
              <div className={cn(
                "space-y-6",
                formData.title_alighnement === 'center' && "text-center",
                formData.title_alighnement === 'right' && "text-right",
                formData.title_alighnement === 'left' && "text-left"
              )}>
                {/* Title */}
                <h1 className={cn(
                  formData.h1_text_size,
                  "font-bold",
                  getTitleColorClasses()
                )}>
                  {formData.h1_title || 'Your Hero Title Here'}
                </h1>

                {/* Description */}
                <p className={cn(
                  formData.p_description_size,
                  formData.p_description_weight,
                  getColorValue(formData.p_description_color)
                )}>
                  {formData.p_description || 'Your hero description goes here. Add compelling text to engage your visitors.'}
                </p>

                {/* Buttons */}
                {(formData.button_main_get_started || formData.button_explore) && (
                  <div className={cn(
                    "flex gap-4",
                    formData.title_alighnement === 'center' && "justify-center",
                    formData.title_alighnement === 'right' && "justify-end",
                    formData.title_alighnement === 'left' && "justify-start"
                  )}>
                    {formData.button_main_get_started && (
                      <button className="px-6 py-3 bg-sky-600 text-white rounded-lg hover:bg-sky-700 transition-colors">
                        {formData.button_main_get_started}
                      </button>
                    )}
                    {formData.button_explore && (
                      <button className="px-6 py-3 bg-white text-sky-600 border border-sky-200 rounded-lg hover:bg-sky-50 transition-colors">
                        {formData.button_explore}
                      </button>
                    )}
                  </div>
                )}
              </div>
            </div>
          </div>

          {/* Form Fields */}
          <div className="p-6 space-y-6 bg-white">
            <h3 className="text-lg font-semibold text-gray-900">Content</h3>
            
            {/* Title */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Hero Title *
              </label>
              <input
                type="text"
                value={formData.h1_title}
                onChange={(e) => handleFieldChange('h1_title', e.target.value)}
                className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-sky-500 focus:border-transparent"
                placeholder="Enter hero title..."
              />
            </div>

            {/* Description */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Description
              </label>
              <textarea
                value={formData.p_description}
                onChange={(e) => handleFieldChange('p_description', e.target.value)}
                rows={4}
                className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-sky-500 focus:border-transparent"
                placeholder="Enter hero description..."
              />
            </div>

            {/* Button Labels */}
            <div className="grid grid-cols-2 gap-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Primary Button
                </label>
                <input
                  type="text"
                  value={formData.button_main_get_started}
                  onChange={(e) => handleFieldChange('button_main_get_started', e.target.value)}
                  className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-sky-500 focus:border-transparent"
                  placeholder="Get Started"
                />
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Secondary Button
                </label>
                <input
                  type="text"
                  value={formData.button_explore}
                  onChange={(e) => handleFieldChange('button_explore', e.target.value)}
                  className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-sky-500 focus:border-transparent"
                  placeholder="Explore"
                />
              </div>
            </div>

            {/* Advanced Options */}
            <div className="border-t border-gray-200 pt-6">
              <h3 className="text-lg font-semibold text-gray-900 mb-4">Advanced Options</h3>
              
              <div className="space-y-3">
                <label className="flex items-center gap-2">
                  <input
                    type="checkbox"
                    checked={formData.is_seo_title}
                    onChange={(e) => handleFieldChange('is_seo_title', e.target.checked)}
                    className="rounded border-gray-300 text-sky-600 focus:ring-sky-500"
                  />
                  <span className="text-sm text-gray-700">Use as SEO title (H1)</span>
                </label>

                <label className="flex items-center gap-2">
                  <input
                    type="checkbox"
                    checked={formData.is_image_full_page}
                    onChange={(e) => handleFieldChange('is_image_full_page', e.target.checked)}
                    className="rounded border-gray-300 text-sky-600 focus:ring-sky-500"
                  />
                  <span className="text-sm text-gray-700">Full-page image</span>
                </label>
              </div>
            </div>
          </div>
        </div>

        {/* Fixed Footer */}
        <div className="sticky bottom-0 bg-sky-50 border-t border-sky-200 px-6 py-4">
          <div className="flex items-center justify-between">
            {/* Delete Button (Edit mode only) */}
            {mode === 'edit' && (
              <button
                onClick={() => setShowDeleteConfirm(true)}
                className="px-4 py-2 text-red-600 hover:bg-red-50 rounded-lg transition-colors"
              >
                Delete
              </button>
            )}
            {mode === 'create' && <div />}

            {/* Save/Cancel */}
            <div className="flex items-center gap-3">
              <Button
                variant="secondary"
                onClick={closeModal}
                disabled={isSaving}
              >
                Cancel
              </Button>
              <Button
                variant="primary"
                onClick={handleSave}
                disabled={isSaving || !formData.h1_title}
              >
                {isSaving ? 'Saving...' : mode === 'create' ? 'Create Hero Section' : 'Save Changes'}
              </Button>
            </div>
          </div>
        </div>
      </BaseModal>

      {/* Delete Confirmation Modal */}
      {showDeleteConfirm && (
        <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-[60]">
          <div className="bg-white rounded-lg p-6 max-w-md w-full mx-4">
            <h3 className="text-lg font-semibold text-gray-900 mb-2">Delete Hero Section?</h3>
            <p className="text-gray-600 mb-6">
              This will permanently delete the hero section. This action cannot be undone.
            </p>
            <div className="flex items-center justify-end gap-3">
              <Button
                variant="secondary"
                onClick={() => setShowDeleteConfirm(false)}
                disabled={isSaving}
              >
                Cancel
              </Button>
              <Button
                variant="danger"
                onClick={handleDelete}
                disabled={isSaving}
              >
                {isSaving ? 'Deleting...' : 'Delete'}
              </Button>
            </div>
          </div>
        </div>
      )}

      {/* Image Gallery Modal */}
      {showImageGallery && (
        <ImageGalleryModal
          isOpen={showImageGallery}
          onClose={() => setShowImageGallery(false)}
          onSelectImage={(url) => {
            handleFieldChange('image', url);
            setShowImageGallery(false);
          }}
        />
      )}
    </>
  );
}
